# 10章 標準ライブラリ：reモジュール
# reモジュールは高度な文字列処理を行う正規表現ツールを提供する
# 簡単なことしかしないときは、文字列メソッドの方がよい

import re

text = "私は2025年にPythonを始めて、今は毎日勉強中です！ あと気持ち的には17歳です！"

# 数字だけを全部抜き出す
# 正規表現"\d+"の意味："\d"は数字、"+"は「直前の文字を1回以上繰り返す」→数字が1文字以上続くつながり
# 正規表現として"\"をそのまま渡すため、r文字列（ロー文字列）を指定する必要がある
result = re.findall(r"\d+", text)

print(result)  # ['2025', 17]

text = "チノの電話番号は080-1234-5678です♡"

# 電話番号を「XXX-XXXX-XXXX」にマスクする（電話番号を伏せたテキストに置換）
# re.sub(パターン, 置き換える文字列, 対象文字列)
# 正規表現の意味："\d{2,4}"：数字"\d"が2~4回繰り返される"{2,4}" → つまり2~4桁の数字
# 正規表現として"\"をそのまま渡すため、r文字列（ロー文字列）を指定する必要がある
masked = re.sub(r"\d{2,4}-\d{2,4}-\d{4}", "XXX-XXXX-XXXX", text)

print(masked)  # チノの電話番号はXXX-XXXX-XXXXです♡

# "f"から始まる単語を抜き出す
# 正規表現の意味：
#   "\b"は単語の頭にマッチ＋"f"で単語の頭文字が"f"
#   "[a-z]*"は「a~zの文字」＋"*"で直前の文字（a~z）が0回以上
word_f = re.findall(r"\bf[a-z]*", "whitch foot or hand feel fastest")
print("fから始まる単語:", word_f)

# 連続した同じ単語を検知して、単語1つに置換する
# 下記テキストの場合「the the」を検知して「the」に置換する
# 正規表現の意味：
# "\b"は単語の頭にマッチ
# "[a-z]+"は小文字のアルファベット1文字以上
# "\1"は「さっきの単語と同じもの」カッコで囲んだキャプチャグループ
#       ([a-z]+) → 小文字の単語をキャプチャ（＝1回目に出た単語を覚える）
#       \1 → さっきキャプチャした単語と同じ文字列を再度探す
# これで「the」（a-zの単語）＋半角スペース＋「さっきの単語と同じもの」を検知する
text_sub = re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
print("置換後のテキスト:", text_sub)
