# 問題集13章：問題36
# reモジュール
# reモジュールは、正規表現による文字列処理を行う関数を提供する

import re

str = "aaa@xxx.com bbb@yyy.net ccc@zzz.org DDD@xyz.com"

# 前提知識：r文字列とは？
# エスケープシーケンスが解釈されず、生の文字列となる（raw文字列）※「生の文字列」の意味
str_n = "1行目\n2行目\n3行目"
str_r = r"1行目\n2行目\n3行目"
print(str_n)    # エスケープシーケンスが解釈される（\nで改行される）
print("r文字列:", str_r)    # エスケープシーケンスが解釈されない

# re.findall()
# 第一引数が正規表現パターン　→　エスケープシーケンスが解釈されないr文字列とする
# 第二引数が処理する文字列
# 返り値：マッチするすべての部分文字列をリストにして返す

# マッチパターン1："[a-z]+"
# [a-z]：小文字のアルファベット1文字
# +    ：直前の文字の1回以上の繰り返し
# つまり：小文字のアルファベットが連続した部分文字列を抽出する
res = re.findall(r"[a-z]+", str)
print("マッチパターン1:", res)

# マッチパターン2："[a-z]+@[a-z]+\.[a-z]+"
# \.：「.」はメタ文字（改行以外の任意の1文字）なので「\」でエスケープする必要がある。
# つまり：アルファベット小文字だけのメールアドレスを抽出する　→　「（アルファベット小文字）@（アルファベット小文字）.（アルファベット小文字）」
res = re.findall(r"[a-z]+@[a-z]+\.[a-z]+", str)
print("マッチパターン2:", res)
# 出力：['aaa@xxx.com', 'bbb@yyy.net', 'ccc@zzz.org']

# マッチパターン3："\bf[a-z]*"
# \b：単語の先頭
# * ：直前の文字の0回以上の繰り返し（なくてもよい）
# つまり：「単語の先頭」が「f」で始まり、その後「アルファベット小文字が続いても、無くてもよい」部分文字列を抽出する
str = "whitch foot and hand fell fastest"
res = re.findall(r"\bf[a-z]*", str)
print("マッチパターン3:", res)
# 出力： ['foot', 'fell', 'fastest']

# re.sub()
# 第一引数が正規表現パターン　→　エスケープシーケンスが解釈されないr文字列とする
# 第二引数が置換パターン
# 第三引数が処理する文字列
# 返り値：置換処理された文字列を返す
str = "tic tac tac toe"
# マッチパターン："([a-z]+) \1"
# ()：括弧内をグループ化する
# \1：1番目のグループ
# つまり：「（小文字アルファベット1文字以上）（半角スペース）（1番目のグループと同じ文字列）」を抽出する
# 置換後：「（1番目のグループと同じ文字列）」になる、つまり「aaa aaa」が「aaa」になる
res = re.sub(r"([a-z]+) \1", r"\1", str)
print("置換後:", res)
# 出力：tic tac toe
